{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","fabric","require","Nuclear","createReactClass","reactor","Reactor","debug","keys","obj","key","ret","Object","Array","isArray","Error","hasOwnProperty","keyMirror","fabricData","activeObject","fabricCanvas","Canvas","fabricStore","Store","getInitialState","toImmutable","objects","initialize","this","on","saveFabricData","saveActiveObject","state","set","value","registerStores","Fabric","componentDidMount","el","ReactDOM","findDOMNode","height","window","innerHeight","width","innerWidth","backgroundColor","dispatch","toObject","getActiveObject","renderAll","render","NewObjects","mixins","ReactMixin","getDataBindings","style","float","onClick","addKanalImg","addSmokeImg","placeholder","type","name","id","maxlength","addPlayer","src","document","getElementById","img","createElement","body","appendChild","addCircle","add","Circle","radius","originX","originY","fill","top","left","setActiveObject","getObjects","fire","addSquare","Rect","Image","fromURL","setBackgroundImage","bind","scaleX","scaleY","image","angle","scale","setCoords","setRed","setGreen","setBlue","remove","ActiveObject","fabricObject","App","className","Boolean","location","hostname","match","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b4c35a96.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport ReactDOM from 'react-dom'\nimport logo from './logo.svg';\nimport './App.css';\n\nconst fabric = require(\"fabric\").fabric;\nconst Nuclear = require(\"nuclear-js\");\nconst createReactClass = require('create-react-class');\n\nvar keyMirror = function(obj) {\n  var ret = {};\n  var key;\n  if (!(obj instanceof Object && !Array.isArray(obj))) {\n    throw new Error('keyMirror(...): Argument must be an object.');\n  }\n  for (key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      ret[key] = key;\n    }\n  }\n  return ret;\n};\n\nvar reactor = new Nuclear.Reactor({ debug: true });\nvar keys = keyMirror({ fabricData: null, activeObject: null });\n\n// globally accessable fabricCanvas instance\nvar fabricCanvas = new fabric.Canvas();\n\n// A place to put fabric data\nvar fabricStore = Nuclear.Store({\n  getInitialState() {\n    return Nuclear.toImmutable({\n    \tfabricData: {\n      \tobjects: [],\n      },\n      activeObject: false,\n    })\n  },\n  initialize() {\n    this.on(keys.fabricData, this.saveFabricData)\n    this.on(keys.activeObject, this.saveActiveObject)\n  },\n  saveFabricData(state, fabricData) {\n\t\treturn state.set('fabricData', Nuclear.toImmutable(fabricData));\n\t},\n  saveActiveObject(state, value) {\n\t\treturn state.set('activeObject',value);\n\t}\n});\n\nreactor.registerStores({\n  'fabricStore': fabricStore,\n});\n\nvar Fabric = createReactClass({\n\tcomponentDidMount() {\n  \tvar el = ReactDOM.findDOMNode(this);\n    \n    // Here we have the canvas so we can initialize fabric\n    fabricCanvas.initialize(el, {\n    \theight: window.innerHeight,\n      width: window.innerWidth-200,\n      backgroundColor : \"#000\",\n    });\n    \n    // on mouse up lets save some state\n    fabricCanvas.on('mouse:up', () => {\n      reactor.dispatch(keys.fabricData, fabricCanvas.toObject());\n      reactor.dispatch(keys.activeObject, !!fabricCanvas.getActiveObject());\n    });\n    \n    // an event we will fire when we want to save state\n    fabricCanvas.on('saveData', () => {\n    \treactor.dispatch(keys.fabricData, fabricCanvas.toObject());\n      reactor.dispatch(keys.activeObject, !!fabricCanvas.getActiveObject());\n      fabricCanvas.renderAll(); // programatic changes we make will not trigger a render in fabric\n    });\n  }, \n  render() {\n    return <canvas></canvas>\n  }\n});\n\nvar player_add;\n\nvar NewObjects = createReactClass({\n\tmixins: [reactor.ReactMixin],\n  getDataBindings() {\n  \treturn {\n    \tfabricData: ['fabricStore', 'fabricData'],\n    \tactiveObject: ['fabricStore', 'activeObject'],\n    };\n  },\n  render: function() {\n  \t//if (this.state.fabricData.get('objects').size == 0) {\n    \t// no object is on the canvas so show interface to add one\n      return (\n      <div style={{float: \"right\"}}>\n        <button onClick={this.addKanalImg}>Add Kanal Map </button>\n        <br></br>\n        <button onClick={this.addSmokeImg}>Add Square</button>\n        <br></br>\n        <input placeholder=\"Name\" type='text' name='username' id='username' value={this.state.value}  maxlength=\"50\" />\n        <br></br>\n      <button onClick={this.addPlayer}>ADD PLAYER</button>\n      </div>\n      );\n    /*} else if (this.state.activeObject) {\n    \t// an object is selected so lets interact with it\n    \treturn (<div>\n      \t<div style={{ border: '1px solid', padding: '10px 5px 5px', margin: '15px 10px 0 0' }}>\n          Set Color:\n          <button onClick={this.setRed}>Red</button>\n          <button onClick={this.setGreen}>Green</button>\n          <button onClick={this.setBlue}>Blue</button>\n        </div>\n        <br />\n        <button onClick={this.remove}>Delete Object</button>\n      </div>);\n    } *///else {\n    \t// if there is an object but it is not selected then remove the buttons\n    \t//return null;\n    //}\n  },\n  addPlayer(){\n    var val = document.getElementById('og:image').value,\n                src = 'http://webpage.com/images/' + val +'.png',\n                img = document.createElement('img');\n\n            img.src = src;\n            document.body.appendChild(img);\n  },\n  addCircle() {\n  \t// all our action handler can just talk directly to fabric\n  \tfabricCanvas.add(new fabric.Circle({\n    \tradius: 50,\n      originX: 'center',\n      originY: 'center',\n      fill: '#FFF',\n      top: fabricCanvas.height / 2,\n      left: fabricCanvas.width / 2,\n    }));\n    fabricCanvas.setActiveObject(fabricCanvas.getObjects()[0]);\n    \n    // when we are done makeing changes send the state from fabric\n    fabricCanvas.fire('saveData');\n  },\n  addSquare() {\n  \tfabricCanvas.add(new fabric.Rect({\n    \theight: 100,\n    \twidth: 100,\n      originX: 'center',\n      originY: 'center',\n      fill: '#FFF',\n      top: fabricCanvas.height / 2,\n      left: fabricCanvas.width / 2,\n    }));\n    fabricCanvas.setActiveObject(fabricCanvas.getObjects()[0]);\n    fabricCanvas.fire('saveData');\n  },\n  addKanalImg(){/*\n    fabric.Image.fromURL('https://vignette.wikia.nocookie.net/rainbowsix/images/8/8f/Kanal_1st_floor_227430.png/revision/latest?cb=20151202214817', function(image) {\n      image.set({\n        left: 0,\n        top: 0,\n        angle: 0\n      })\n      .scale(.8)\n      .setCoords();\n\n      fabricCanvas.add(image);\n    });*/\n    fabric.Image.fromURL('https://vignette.wikia.nocookie.net/rainbowsix/images/8/8f/Kanal_1st_floor_227430.png/revision/latest?cb=20151202214817', function(img) {\n      // add background image\n      fabricCanvas.setBackgroundImage(img, fabricCanvas.renderAll.bind(fabricCanvas), {\n         scaleX: fabricCanvas.width / img.width,\n         scaleY: fabricCanvas.height / img.height\n      });\n   });\n  },\n  addSmokeImg(){\n    fabric.Image.fromURL('https://www.vhv.rs/dpng/d/579-5793740_rainbow-six-operator-icons-hd-png-download.png', function(image) {\n      image.set({\n        left: 0,\n        top: 0,\n        angle: 0\n      })\n      .scale(.05)\n      .setCoords();\n\n      fabricCanvas.add(image);\n    });\n  },\n  \n  setRed() {\n  \t// another instance where we are just talking to fabric directly\n  \tfabricCanvas.getActiveObject().fill = 'red';\n    fabricCanvas.fire('saveData');\n  },\n  setGreen() {\n  \tfabricCanvas.getActiveObject().fill = 'green';\n    fabricCanvas.fire('saveData');\n  },\n  setBlue() {\n  \tfabricCanvas.getActiveObject().fill = 'blue';\n    fabricCanvas.fire('saveData');\n  },\n  remove() {\n    fabricCanvas.remove(fabricCanvas.getActiveObject());\n    fabricCanvas.fire('saveData');\n  }\n});\n\nvar ActiveObject = createReactClass({\n\tmixins: [reactor.ReactMixin],\n  getDataBindings() {\n  \treturn {\n    \tfabricObject: ['fabricStore', 'fabricData', 'objects', 0],\n    };\n  },\n  render: function() {\n    return null;\n  \tif (this.state.fabricObject) {\n    \t// if an object exists in state we can acess the data from any where in the app\n    \tvar fill = this.state.fabricObject.get('fill');\n      return (<div>\n        <div><b>Active Object</b></div>\n        <div>fill: <span style={{ color: fill}}>{this.state.fabricObject.get('fill')}</span></div>\n        <div>top: {this.state.fabricObject.get('top')}</div>\n        <div>left: {this.state.fabricObject.get('left')}</div>\n        <div>angle: {this.state.fabricObject.get('angle')}</div>\n        <div>scaleX: {this.state.fabricObject.get('scaleX')}</div>\n        <div>scaleY: {this.state.fabricObject.get('scaleY')}</div>\n      </div>);\n    } else {\n    \treturn null;\n    }\n  },\n});\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div style={{ float: 'right' }}>\n    \t\t<ActiveObject />\n    \t\t<NewObjects />\n      </div>\n    \t<Fabric />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}